{"name":"localForage","tagline":"Offline storage, improved.","body":"# localForage #\r\n\r\nlocalForage is a handy library that improves the offline experience of your web\r\napp by using asynchronous storage (via IndexedDB or WebSQL where available) but\r\nwith a simple, `localStorage`-like API.\r\n\r\nlocalForage includes a localStorage-backed fallback store for browsers with no\r\nIndexedDB or WebSQL support. This means that asynchronous storage is available\r\nin Chrome, Firefox, and Safari (including Safari Mobile).\r\n\r\n## Browser Support ##\r\n\r\nAll of 'em. Worst-case localStorage fallback will be used, but asynchronous\r\nstorage will be used for:\r\n\r\n* Android Browser (2.1+)\r\n* Blackberry (7+)\r\n* Chrome (23+)\r\n* Chrome for Android (32+)\r\n* Firefox (10+)\r\n* Firefox for Android (25+)\r\n* IE (10+)\r\n* IE Mobile (10+)\r\n* Opera (15+)\r\n* Opera Mobile (11+)\r\n* Safari (3.1+)\r\n\r\n## Callbacks ##\r\n\r\nBecause localForage uses async storage, it has an async API. It's otherwise\r\nexactly the same as the\r\n[localStorage API](https://hacks.mozilla.org/2009/06/localstorage/).\r\n\r\n    // In localStorage, we would do:\r\n    localStorage.setItem('key', JSON.stringify('value'));\r\n    doSomethingElse();\r\n\r\n    // With localForage, we use callbacks:\r\n    localForage.setItem('key', 'value', doSomethingElse);\r\n\r\nSimilarly, please don't expect a return value from calls to\r\n`localForage.getItem()`. Instead, use a callback:\r\n    \r\n    // Synchronous; slower!\r\n    var value = JSON.parse(localStorage.getItem('key'));\r\n    alert(value);\r\n\r\n    // Async, fast, and non-blocking!\r\n    localForage.getItem('key', alert);\r\n\r\nAlso of note is that localForage will automatically convert the values you\r\nget and set to JSON if you happen to be using localStorage as a backend. You\r\ndon't have to pollute your code with `JSON.stringify()` and `JSON.parse` calls!\r\n\r\nIf you try to read a key that hasn't been stored yet, `null` will be returned\r\nin the callback.\r\n\r\n## Promises ##\r\n\r\nPromises are pretty cool! If you'd rather use promises than callbacks,\r\nlocalForage supports that too:\r\n\r\n    function doSomethingElse(value) {\r\n        console.log(value);\r\n    }\r\n\r\n    // With localForage, we allow promises:\r\n    localForage.setItem('key', 'value').then(doSomethingElse);\r\n\r\nlocalForage relies on native [ES6 Promises](http://www.promisejs.org/), but\r\n[ships with an awesome polyfill](https://github.com/jakearchibald/ES6-Promises)\r\nfor browsers that don't yet support ES6 Promises natively.\r\n\r\n## Forcing localStorage ##\r\n\r\nFor development, it can be easier to use the\r\nslower--but easier to debug--localStorage driver. Because localStorage can\r\neasily be inspected from the console, we allow for this with a simple global\r\nvariable assignment: `window._FORCE_LOCALSTORAGE = true;`. If this is set to\r\nany truthy value, localStorage will be used regardless of driver.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}